/**
 ** @brief Reading temperature from si7021 sensor task 
 **/
static void readTemperatureSI7021Task(void)
{
	static SI7021_typedef dev_si7021_inst0 = { 
	
		.dev_address = ADDR_SI7021_SHIFTED,
		.read_data_i2c = si7021_i2c_read,
		.write_data_i2c = si7021_i2c_write,
		.delay = user_delay_ms,
	};

	vTaskDelay(100);
	driveResetPin(PCA9546_RSTPIN_SET);
	selectChannel(CHANNEL_SI7021, &pca9546_instance0);
	getSI7021ElectronicSerialNumber(&dev_si7021_inst0);

	
	for (;;)
	{
		TempHumStruct_typedef *device_compinsated_data_si7021; 
		xSemaphoreTake(mutI2C1Handle, portMAX_DELAY);	
		selectChannel(CHANNEL_SI7021, &pca9546_instance0);
		getSI7021Temp(&dev_si7021_inst0);
		device_compinsated_data_si7021 = getSI7021Hum(&dev_si7021_inst0);
		//vTaskSuspend(readTemperatureSI7021Handle);
		xSemaphoreGive(mutI2C1Handle);
		vTaskDelay(1000);
		
	}
}


//additional function
#include "stm32l4xx_hal.h"

/**
 ** @brief External variable
 **/
extern I2C_HandleTypeDef hi2c1;

/**
 ** @brief Drive reset pin
 **/
void driveResetPin(uint8_t drive_reset_pin)
{
	if (drive_reset_pin)
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
	else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
}

/**
 ** @brief Read i2c function for external device library 
 **/
int8_t si7021_i2c_read(uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
	int8_t rslt = 1; /* Return 0 for Success, non-zero for failure */
	
	rslt = HAL_I2C_Mem_Read_IT(&hi2c1, DevAddress, MemAddress, MemAddSize, pData, Size);

	return rslt = 0;
}

/**
 ** @brief Write i2c function for external device library 
 **/
int8_t si7021_i2c_write(uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
	int8_t rslt = 1; /* Return 0 for Success, non-zero for failure */

	rslt = HAL_I2C_Mem_Write_IT(&hi2c1, DevAddress, MemAddress, MemAddSize, pData, Size);

	return rslt = 0;
}

/**
 ** @brief Alternative write  function for external device library 
 **/
int8_t user_i2c_write_alt(uint8_t dev_addr, uint8_t data, uint16_t len)
{
	int8_t rslt = 1; /* Return 0 for Success, non-zero for failure */
	
	uint8_t tmp_data = data;
	rslt = HAL_I2C_Master_Transmit_IT(&hi2c1, dev_addr, &tmp_data, len);
	
	return rslt = 0;
}

/**
 ** @brief Delay function for external device library 
 **/
void user_delay_ms(uint32_t period)
{
	vTaskDelay(period);
	//HAL_Delay(period);
}